from typing import List
from psycopg2._psycopg import connection


CREATE_SCHEMA = """
CREATE SCHEMA IF NOT EXISTS website_availability;
"""

CREATE_AMC = """
CREATE TABLE IF NOT EXISTS website_availability.availability_monitor_config (
    amc_id INT GENERATED BY DEFAULT AS IDENTITY,
    amc_url_with_schema VARCHAR NOT NULL,
    amc_regexp TEXT
    );"""

CREATE_AMC_COMMENTS = """
comment on column website_availability.availability_monitor_config.amc_id is 'The unique ID for the website';
comment on column website_availability.availability_monitor_config.amc_url_with_schema is 'The url to be checked';
comment on column website_availability.availability_monitor_config.amc_regexp is 'Regexp to check the contents of the website against';
"""

CREATE_AMM = """
CREATE TABLE IF NOT EXISTS website_availability.availability_monitor_metrics (
    amm_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    amm_unix_timestamp INTEGER,
    amd_response_code INTEGER,
    amd_response_time INTEGER,
    amm_regexp_found BOOLEAN
);"""

CREATE_AMM_COMMENTS = """
comment on column website_availability.availability_monitor_metrics.amm_id is 'Unique ID of the event';
comment on column website_availability.availability_monitor_metrics.amm_unix_timestamp is 'Unix timestamp in which the request was sent';
comment on column website_availability.availability_monitor_metrics.amd_response_code is 'Response code of the request';
comment on column website_availability.availability_monitor_metrics.amd_response_time is 'Response time in microseconds';
comment on column website_availability.availability_monitor_metrics.amm_regexp_found is 'Wether or not a filter regular expression was found. Null means the check is not required';
"""


def run_sql_query(conn: connection, sql_query: str, fetch_results: bool = False) -> List:
    """Runs a SQL query and return the results when requested"""
    cur = conn.cursor()
    cur.execute(sql_query)
    if fetch_results:
        return cur.fetchall()
    else:
        return []


def configure_monitoring_database(conn: connection) -> None:
    """Configures the database to be able to host the monitoring producer and consumer's data"""
    run_sql_query(conn, CREATE_SCHEMA)
    run_sql_query(conn, CREATE_AMC)
    run_sql_query(conn, CREATE_AMC_COMMENTS)
    run_sql_query(conn, CREATE_AMM)
    run_sql_query(conn, CREATE_AMM_COMMENTS)

